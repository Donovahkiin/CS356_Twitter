/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package cs356_twitter;

import java.util.HashMap;
import java.util.Map;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import visitorPattern.GroupTotalVisitor;
import visitorPattern.TweetPositivePercentage;
import visitorPattern.TweetTotalVisitor;
import visitorPattern.UserTotalVisitor;
import visitorPattern.Visitor;

/** CS 356 - Assignment 2
 *  Mini Twitter
 *  11/7/2017
 *
 *  @author Donovan Rush
 */
public class TwitterAdmin extends javax.swing.JFrame {

    public TwitterAdmin() {
        initComponents();
        this.setTitle("TwitterAdmin");
    }

    private static final TwitterAdmin instance = new TwitterAdmin();
    private static Map<String, Selectable> map = new HashMap<String, Selectable>();  // accounts for both Users and Groups
    
    public static TwitterAdmin getInstance() {  // Singleton Pattern
        return instance;
    }
    
    public User getUser(String ID) {
        if(map.get(ID) instanceof User) {
            return (User) map.get(ID);
        }
        else
            return null;
    }
    
    private User newUser(String ID) {
        User user = new User(ID);
        map.putIfAbsent(ID, user); 
        user.addSubscription(user);  // Everyone is their own follower: this makes seeing your own posts easy. 
        return user;
    }
    
    private Group newGroup(String ID) {
        Group group = new Group(ID);
        map.putIfAbsent(ID, group);
        return group;
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        OpenUserView = new javax.swing.JButton();
        ShowTweetTotal = new javax.swing.JButton();
        PercentagePositive = new javax.swing.JButton();
        jSplitPane1 = new javax.swing.JSplitPane();
        UserID = new javax.swing.JTextField();
        AddUser = new javax.swing.JButton();
        jSplitPane2 = new javax.swing.JSplitPane();
        GroupID = new javax.swing.JTextField();
        AddGroup = new javax.swing.JButton();
        ShowGroupTotal = new javax.swing.JButton();
        ShowUserTotal = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        UserTree = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        OpenUserView.setText("Open User View");
        OpenUserView.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenUserViewActionPerformed(evt);
            }
        });

        ShowTweetTotal.setText("Show Tweet Total");
        ShowTweetTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowTweetTotalActionPerformed(evt);
            }
        });

        PercentagePositive.setText("Percentage of Positive Tweets");
        PercentagePositive.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PercentagePositiveActionPerformed(evt);
            }
        });

        UserID.setText("User ID");
        jSplitPane1.setLeftComponent(UserID);

        AddUser.setText("Add User");
        AddUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddUserActionPerformed(evt);
            }
        });
        jSplitPane1.setRightComponent(AddUser);

        GroupID.setText("Group ID");
        jSplitPane2.setLeftComponent(GroupID);

        AddGroup.setText("Add Group");
        AddGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddGroupActionPerformed(evt);
            }
        });
        jSplitPane2.setRightComponent(AddGroup);

        ShowGroupTotal.setText("Show Group Total");
        ShowGroupTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowGroupTotalActionPerformed(evt);
            }
        });

        ShowUserTotal.setText("Show User Total");
        ShowUserTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowUserTotalActionPerformed(evt);
            }
        });

        javax.swing.tree.DefaultMutableTreeNode treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("ROOT");
        UserTree.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane1.setViewportView(UserTree);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(OpenUserView, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSplitPane1)
                    .addComponent(jSplitPane2)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ShowTweetTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 225, Short.MAX_VALUE)
                            .addComponent(ShowUserTotal, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(ShowGroupTotal, javax.swing.GroupLayout.DEFAULT_SIZE, 213, Short.MAX_VALUE)
                            .addComponent(PercentagePositive, javax.swing.GroupLayout.PREFERRED_SIZE, 1, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jSplitPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(OpenUserView, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ShowGroupTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(ShowUserTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(ShowTweetTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(PercentagePositive, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void OpenUserViewActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenUserViewActionPerformed
    // Read the selected user on the UserTree. Create a new UserView window for this user.
    DefaultMutableTreeNode selection =  (DefaultMutableTreeNode) UserTree.getSelectionPath().getLastPathComponent();
    
    if(selection.getUserObject() instanceof User) {
        User user = (User) selection.getUserObject();
        user.getWindow().setVisible(true);      // make visible the window associated with this user.
    }   
    }//GEN-LAST:event_OpenUserViewActionPerformed

    private void AddUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddUserActionPerformed
        if (!map.containsKey(UserID.getText())) // do nothing if this ID already exists
        {
            User entry = newUser(UserID.getText());
            addNode(entry);
            entry.setWindow(new UserView(entry));   // "create" a window, but it will be invisible at first.
        }
    }//GEN-LAST:event_AddUserActionPerformed

    private void AddGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddGroupActionPerformed
        if (!map.containsKey(GroupID.getText())) // do nothing if this ID already exists
        {
            Group entry = newGroup(GroupID.getText());
            addNode(entry);
        }
    }//GEN-LAST:event_AddGroupActionPerformed

    private void ShowUserTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowUserTotalActionPerformed
        UserTotalVisitor userTotal = new UserTotalVisitor();
        iterateVisitor(userTotal);
        System.out.println(userTotal.returnTotal());
    // print statement is not included in the iterativeVisitor method BECAUSE the percentage
    //  button needs the output to be a double, while the rest are ints. 
    }//GEN-LAST:event_ShowUserTotalActionPerformed

    private void ShowGroupTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowGroupTotalActionPerformed
        GroupTotalVisitor groupTotal = new GroupTotalVisitor();
        iterateVisitor(groupTotal);
        System.out.println(groupTotal.returnTotal()); 
    }//GEN-LAST:event_ShowGroupTotalActionPerformed

    private void ShowTweetTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowTweetTotalActionPerformed
        TweetTotalVisitor tweetTotal = new TweetTotalVisitor();
        iterateVisitor(tweetTotal);
        System.out.println(tweetTotal.returnTotal()); 
    }//GEN-LAST:event_ShowTweetTotalActionPerformed

    private void PercentagePositiveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PercentagePositiveActionPerformed
        TweetPositivePercentage percent = new TweetPositivePercentage();
        iterateVisitor(percent);
        System.out.println(percent.returnTotal());
    }//GEN-LAST:event_PercentagePositiveActionPerformed

    private void iterateVisitor(Visitor visitorType) {
        for (Map.Entry<String, Selectable> entry : map.entrySet())      // for every entry in our map
        {
            if (entry.getValue() instanceof User) {
                User temp = (User) entry.getValue();
                temp.accept(visitorType);
            }
            else {
                Group temp = (Group) entry.getValue();
                temp.accept(visitorType);
            }
        }
    }
    
    private void addNode(Selectable entry) {    // called by the addUser and addGroup buttons
        DefaultTreeModel model = (DefaultTreeModel) UserTree.getModel();
        DefaultMutableTreeNode root = (DefaultMutableTreeNode) model.getRoot();
        DefaultMutableTreeNode newNode = new DefaultMutableTreeNode(entry); // Nodes hold an object of their User/Group class

        // check if a tree node was selected
        if (UserTree.isSelectionEmpty()) {
            root.add(newNode);
        } else {
            DefaultMutableTreeNode selection = (DefaultMutableTreeNode) UserTree.getSelectionPath().getLastPathComponent();

            if (selection.getUserObject() instanceof Group) {    // if a group is selected
                selection.add(newNode);
            } else {  // otherwise, just put the user in the root directory. 
                root.add(newNode);
            }
        }
        
        model.reload();
        UserTree.scrollPathToVisible(new TreePath(newNode.getPath()));  // open group directory to make it visible
    }
        
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TwitterAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TwitterAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TwitterAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TwitterAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TwitterAdmin().setVisible(true);
            }
        });
        
        // create Root Group
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddGroup;
    private javax.swing.JButton AddUser;
    private javax.swing.JTextField GroupID;
    private javax.swing.JButton OpenUserView;
    private javax.swing.JButton PercentagePositive;
    private javax.swing.JButton ShowGroupTotal;
    private javax.swing.JButton ShowTweetTotal;
    private javax.swing.JButton ShowUserTotal;
    private javax.swing.JTextField UserID;
    private javax.swing.JTree UserTree;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSplitPane jSplitPane1;
    private javax.swing.JSplitPane jSplitPane2;
    // End of variables declaration//GEN-END:variables
}
